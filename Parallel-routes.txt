Parallel routes:

It is an advance routing mechanism that allows for the simultaneous rendering of multiple pages within the same layout.

refer comples-dashboard folder.

1. Parallel routes in nextjs are defined using a feature known as slots

2. slots help to structure our content in modular fashion

3. to define a slot, we use the '@folder' convention

4. Each slot is then passed as prop to its corresponding 'layout.tsx' file.

Parallel route benefits:

1. A clear benefit of parallel routes is their ability to split single layout into various slots, making the code more manageable.
2. independent route handling
3. sub-navigation

Independent Route Handling:
1. Each slot of your layout, such as user or revenue or notifications can have their own loading state or errors 
2. This granular control is particularly beneficial in scenarios where different sections of the page load at varying speeds or encounter unique errors.

Sub-navigation routes:

1. Each slot of your dashboard can essentially function as a mini application, complete with its own navigation and state management.
2. This is especially useful in complex applications such as our dashboard where different sections serve distinct purposes.

unmatched routes in sub-navigation:

Page reload:
1.next js immediately searches for a default.tsx file within each unmatched slot.
2. the presence of This file is critical, as it provides the default content that next js will render in the user interface.
3. if this default.tsx file is missing in any of the unmatched slots for the current route, Next js will render a 404 error.

for the above scenario, navigate to complex-dashboard/archived and then reload the page. it will result in 404 error as there is no default.tsx

default.tsx:
1. the default.tsx file in next js serves as a fallback to render the content when the framework cannot retrieve a slot's active state from the current URL.

2. You have complete freedom to define the UI fro unmatched routes: you can mirror the content found in page.tsx or craft an entirely custom view.

Intercepting Routes:
1. Intercepting routes allow you to intercept or stop the default behaviour to present an alternative view or component when navigating therough the UI,
    while still preserving the intended route for scenarios like page reload.
2. this can be useful if you want to show a route while keeping the context of the current page.

example:
1. on a page there is a login button on click of the login button, it will navigate to the login route changing the entire page and url.
    using intercept routes, we will launch intercepted login screen UI, where user can login. this will change the url as will, on page reload or url share. it will load in complete page not in the modal.

2. on page if you are browsing the photos, on click of a particular photo, intercept route helps to launch the image in a modal, changing the url for the particular image.

Refer: f1 folder

intercepting route at the same level
for this example, i have created f1 folder, this will route to f1 component and having link to the f2 component. without the intercepting route it will navigate to f2 component.
intercepted routes is created by (.)<folder name>
with this intecepted route, when we click on the link, now this intecepted route will be rendered. on page reload it will navigae to actual f2 component.

intercepting route one level above: (..)f3

intercept convetional:
1. (.) to match segments on the same level 
2. (..) to match segments on one level above.
3. (..)(..) to match two level segements
4. (...) to match segments from the root level directory.


advanced Routing: Paralle intecepted routing refer photo-feed example
modal isn't working after implementing the intercept routing.