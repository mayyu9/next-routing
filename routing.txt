In this routing project, we have few scenarios

s1:
basic routing,home page implementation
for routing every project should have app folder, under this folder all the page.js / page.tsx will act as route

s2: 
create 2 pages for about and profile.
create a about folder under app, create a page.tsx. this page will be served when run the app alogn with
"/about"

create a profile folder under app, create a page.tsx. this page will be served when run the app alogn with
"/profile"

s3: neseted routing, we use blog folder for this,
we trying to acheive 
localhost:3000/blog/first, localhost:3000/blog/second

s4: Dynamic Routes
passing data from url and reading in the components
for the baove scenario, we have used products folder
in order to pass the and read those props, [productId] this format is used so that next js understands that
it is for passing data

s5: nested dynamic Routes
for this use the product folder. here we are trying to acheive
localhost:3000/product/1/reviews/100
we have to read the data from the url

s6: Catch-all segment
for this we use docs folder
consider a scenario in which we have nested folders. every feature we have multiple concepts. all share the same layout structure.
we end up having multiple number of files. this can be solved by using the dynamic [featureId] route.
still we have same issue with concepts files as well, this can be solved by using the dynamic [conceptId] route
this is called  [...slug] folder where we can read both the featureId and conceptId

[[...slug]]- this is catch all segment, in the above scenario, if we navigate to localhost:3000/docs route. we get 404 page.
if we want to show the docs homepage view then wrap the slug in array braces.

s7: Custom 404 page
for this we have to create a page not-found.tsx. Next Js will render this component when we encouter the route which is not found.

We can programtically call this as a function. provided by nextjs. notFound();
refer the reviewId/page.tsx for this example.
we can have custom not-found.tsx page even at the folder level. if there is a custom not-found at the folder level that not-found page will be rendered.


s8: File colocation
refer dashboard folder. if there is no page.tsx file in the folder, then it will throw the error, even not-found page will not be displayed.
we can define the component outside the app folder and use those ui files in the app Route pages

s9: Private folders
A private folder indicate that it is a private implementation details and should not be considered by the routing system
the folder and all its subfolders are excluded from routing
prefix the folder name with an underscore

s10: Route Group
Route groups allows us to logically group our routes and project files without affecting the URL path structure
lets implement authentication routes
-login
-register
- forgot password

in order to create the above, we have to create 3 folders (login, register, forgot password) and have a respective page.tsx file for sake of routing.
using the route group technique, we can group all folders into one foldet auth and nest this folder into those. which end ups to use the below as route
localhost:3000/auth/login. here we want to acheive localhost:3000/login 
to acheive this we use the Route group concept, we wrap parent level folder with () this syntax i.e(auth)

